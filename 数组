35. 搜索插入位置
/*
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
*/
class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length;
        int left = 0, right = n - 1;
        int mid = left;
        while(left <= right){
            mid = left + (right - left) / 2;
            if (target <= nums[mid]){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        return left;
    }
}

27. 移除元素
/*
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
*/

class Solution {
    public int removeElement(int[] nums, int val) {
        int n = nums.length;
        int i = 0;
        for (int j = 0; j < n; j++){
            if (nums[j] != val){
                nums[i] = nums[j];
                i++;
            }
        }
        return i;
    }
}

59. 螺旋矩阵 II
/*
给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。
*/
class Solution {
    public int[][] generateMatrix(int n) {
        int num = 1;
        int left = 0, top = 0;
        int right = n - 1, down = n - 1;
        int[][] arr = new int[n][n];
        int target = n*n;
        while(num <= target){
            for (int i = left; i <= right; i++){
                arr[top][i] = num;
                num++;
            }
            top++;
            for (int j = top; j <= down; j++){
                arr[j][right] = num;
                num++;
            }
            right--;
            for (int i = right; i >= left; i--){
                arr[down][i] = num;
                num++;
            }
            down--;
            for (int j = down; j >= top; j--){
                arr[j][left] = num;
                num++;
            }
            left++;
        }
        return arr;
    }
    
}



209. 长度最小的子数组
/*
给定一个含有 n 个正整数的数组和一个正整数 target 。
找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。
*/
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int start = 0;
        int end = 0;
        int sum = 0;
        int ans = Integer.MAX_VALUE;
        if (nums.length == 0){
            return 0;
        }
        while(end < nums.length){
            sum += nums[end];
            while(sum >= target){
                ans = (ans > (end - start + 1)) ? end - start + 1 : ans;
                sum -= nums[start];
                start++;
            }
            end++;
        }
        return (ans == Integer.MAX_VALUE) ? 0 : ans;
    }
}
